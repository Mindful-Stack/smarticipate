@page "/Register"
@using System.ComponentModel.DataAnnotations
@using Smarticipate.Web.Authentication
@inject IAccountManagement Account
@inject NavigationManager Navigation

<PageTitle>Home</PageTitle>

<h3>Register</h3>
<EditForm Model="_newUser" OnValidSubmit="RegisterUser">
    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <div>
        <label for="email">Email:</label>
        <InputText id="email" @bind-Value="_newUser.Email"/>
        <ValidationMessage For="@(() => _newUser.Email)"/>
    </div>

    <div>
        <label for="password">Password:</label>
        <InputText id="password" @bind-Value="_newUser.Password" type="password"/>
        <ValidationMessage For="@(() => _newUser.Password)"/>
    </div>

    <div>
        <label for="confirmPassword">Confirm Password:</label>
        <InputText id="confirmPassword" @bind-Value="_confirmPassword" type="password"/>
        <ValidationMessage For="@(() => _confirmPassword)"/>
    </div>

    <button type="submit">Register</button>
</EditForm>

@if (!string.IsNullOrEmpty(_message))
{
    <p style="color: red">@_message</p>
}

@code{
    private string _confirmPassword = "";
    private string? _message="";
    private RegisterModel _newUser = new();

    private bool IsPasswordValid()
    {
        Console.WriteLine("Password is valid!");
        return !string.IsNullOrEmpty(_newUser.Password) && _newUser.Password == _confirmPassword;
    }

    private async Task RegisterUser()
    {
        if (IsPasswordValid()) ;
        var response = await Account.RegisterAsync(_newUser.Email, _newUser.Password);

        if (response.Succeeded)
        {
            var loginResponse = await Account.LoginAsync(_newUser.Email, _newUser.Password);
            if (loginResponse.Succeeded)
            {
                Navigation.NavigateTo("/");
            }
        }
    }

    public class RegisterModel
    {
        [Required] [EmailAddress] public string Email { get; set; } = string.Empty;

        [Required] public string Password { get; set; } = string.Empty;
    }

}