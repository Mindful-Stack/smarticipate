@page "/TeacherSession"
@inject SessionServices SessionServices
@inject UserServices UserServices
@inject QuestionServices QuestionServices
@inject LiveSessionServices LiveSessionServices
@implements IAsyncDisposable

<div class="teacherSession">
    <div class="teacherSessionContent">
        <AuthorizeView>
            <Authorized>
                @if (!_isInSession)
                {
                    <div class="inactiveSessionContainer">
                        <h1>Start a live session</h1>
                        <button class="submitBtn btnWithIcon" onclick="@StartSession">
                            <MudIcon Icon="@Icons.Material.Outlined.SmartDisplay" Style="width: 40px;"/>
                            Start
                        </button>
                    </div>
                }
                else
                {
                    <div class="activeSessionContainer">
                        <div class="sessionInfo">
                            <h2 class="activeSessionTitle">Active Session: @_sessionCode </h2>
                            <MudIconButton Class="stopIcon" Color="Color.Error"
                                           Icon="@Icons.Material.Outlined.StopCircle" Size="Size.Small"
                                           aria-label="stop" OnClick="EndSession"/>
                        </div>
                        <div class="timer">
                            <div class="timerSetup">
                                <h1 class="questionTimer">Question timer</h1>
                                <input class="timerInput" type="number" min="0" @bind="@_inputCountdownTime">
                                <button class="submitBtn btnWithIcon"
                                        onclick="@(_isTimerOn ? StopQuestionCountdown : StartQuestionCountdown)">
                                    <MudIcon Icon="@Icons.Material.Outlined.Timer" Style="width: 40px;"/>
                                    @(_isTimerOn ? "Stop" : "Start")
                                </button>
                            </div>
                            <div class="countdown">
                                <MudProgressCircular Class="progressCircle"
                                                     Color="@(_countdownTime < 20 ? (_countdownTime < 10 ? Color.Error : Color.Tertiary) : Color.Dark)"
                                                     Style="width: 150px; height: 150px;" Value="@_progressPercentage"/>
                                <h1 class="countDownRest">@_countdownDisplay</h1>
                            </div>

                            <div class="responseChartContainer">
                                <h3>Latest Question Responses:</h3>
                                @if (_showResponseChart && _responseSeries.Any())
                                {
                                    <MudChart ChartType="ChartType.Bar"
                                              ChartSeries="@_responseSeries"
                                              XAxisLabels="@_responseLabels"
                                              Width="@_chartWidth"
                                              Height="@_chartHeight"
                                              ChartOptions="@_chartOptions">
                                        <CustomGraphics>
                                            <style>
                                                .count{ font-size:  1.5rem; font-weight: bold; fill: var(--dark);}
                                            </style>
                                            <text x="105" y="105%" class="tooFast count">@_tooFastCount</text>
                                            <text x="348" y="105%" class="perfect count">@_perfectCount</text>
                                            <text x="590" y="105%" class="tooSlow count">@_tooSlowCount</text>
                                        </CustomGraphics>
                                    </MudChart>
                                }
                            </div>
                        </div>
                    </div>
                    <div class="studentCount">
                        <MudIcon Icon="@Icons.Material.Outlined.PeopleOutline" Color="Color.Dark" Size="Size.Large"/>
                        @StudentCount
                    </div>
                }
            </Authorized>
            <NotAuthorized>
                <h2 class="signInPrompt">You need to
                    <a id="signIn" href="/login">sign in</a>
                    to access this page
                </h2>
            </NotAuthorized>
        </AuthorizeView>
    </div>
</div>

@code {

    //SESSION
    private bool _isInSession;
    private string _sessionCode = string.Empty;
    private Random _random = new();

    //STUDENT COUNT
    private int _studentCount = 0;

    private int StudentCount
    {
        get => _studentCount;
        set
        {
            if (_studentCount != value)
            {
                _studentCount = value;
                StateHasChanged();
            }
        }
    }

    //TIMER
    private bool _isTimerOn;
    private int _inputCountdownTime = 60;
    private int _countdownTime = 60;
    private string _countdownDisplay = "00:00";
    private int _initialCountdownTime;
    private double _progressPercentage = 100;
    private Timer? _countdownTimer;

    //HEARTBEAT
    private Timer? _heartbeatTimer;
    private readonly int _heartbeatInterval = 15000;

    //CHART
    private bool _showResponseChart = false;
    private List<ChartSeries> _responseSeries = new();
    private string[] _responseLabels = { "Too Fast", "Perfect", "Too Slow" };
    private string _chartHeight = "280px";
    private string _chartWidth = "100%";
    private ChartOptions _chartOptions = new()
    {
        InterpolationOption = InterpolationOption.NaturalSpline,
        ChartPalette = new string[] { "var(--red)", "var(--teal)", "var(--orange)" },
        ShowToolTips = true,
        YAxisLines = true,
        XAxisLines = true,
        
        LineStrokeWidth = 2
    };
    private int _tooFastCount = 0;
    private int _perfectCount = 0;
    private int _tooSlowCount = 0;

    protected override async Task OnInitializedAsync()
    {
        await LiveSessionServices.InitializeConnection();
        LiveSessionServices.OnStudentCountChanged -= HandleStudentCountChanged;
        LiveSessionServices.OnStudentCountChanged += HandleStudentCountChanged;
        Console.WriteLine("Registered StudentCountChanged handler");

        await LoadActiveSession();

        if (!string.IsNullOrEmpty(_sessionCode))
        {
            await LiveSessionServices.JoinSession(_sessionCode);
            await LiveSessionServices.RegisterAsTeacher(_sessionCode);
            Console.WriteLine($"Teacher registered to session {_sessionCode}");
        }

        await CloseActiveQuestionsAsync();
        StartHeartbeatTimer();
    }

    private void HandleStudentCountChanged(int count)
    {
        Console.WriteLine($"TeacherSession received student count update: {count}");

        StudentCount = count;
        InvokeAsync(StateHasChanged);
    }

    private async Task LoadActiveSession()
    {
        try
        {
            var userId = await UserServices.GetAuthenticatedUser();
            if (!string.IsNullOrEmpty(userId))
            {
                var activeSession = await SessionServices.GetActiveSessionAsync(userId);
                if (activeSession is not null)
                {
                    _isInSession = true;
                    _sessionCode = activeSession.SessionCode;

                    await LiveSessionServices.JoinSession(_sessionCode);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading active session: {ex.Message}");
        }
    }

    private async Task StartSession()
    {
        _isInSession = true;
        if (_isInSession)
        {
            int randomNumber = _random.Next(10000000, 99999999);
            _sessionCode = randomNumber.ToString();

            try
            {
                var userId = await UserServices.GetAuthenticatedUser();

                var request = new SessionServices.SessionRequest(
                    _sessionCode,
                    DateTime.Now,
                    null,
                    userId
                );

                var success = await SessionServices.CreateSessionAsync(request);
                if (success)
                {
                    await LiveSessionServices.JoinSession(_sessionCode);
                    await LiveSessionServices.RegisterAsTeacher(_sessionCode);
                }
                else
                {
                    _isInSession = false;
                    _sessionCode = string.Empty;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Exception when creating session: {ex.Message}");
                _isInSession = false;
                _sessionCode = string.Empty;
            }
        }
    }

    private async Task EndSession()
    {
        try
        {
            if (!string.IsNullOrEmpty(_sessionCode))
            {
                var success = await SessionServices.UpdateSessionAsync(_sessionCode);
                if (!success)
                {
                    Console.WriteLine("Error updating session");
                }

                //Broadcast session end to connected clients
                await LiveSessionServices.EndSession();

                //Leave SignalR group
                await LiveSessionServices.LeaveSession();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception when stopping session: {ex.Message}");
        }
        finally
        {
            _isInSession = false;
            _sessionCode = string.Empty;
            StopQuestionCountdown();
        }
    }

    private async Task StartQuestionCountdown()
    {
        _countdownTime = _inputCountdownTime;
        _initialCountdownTime = _inputCountdownTime;
        _countdownDisplay = TimeSpan.FromSeconds(_countdownTime).ToString(@"mm\:ss");
        _isTimerOn = true;
        _progressPercentage = 100;

        if (!string.IsNullOrEmpty(_sessionCode))
        {
            var success = await QuestionServices.CreateQuestionAsync(_sessionCode);

            if (success)
            {
                var sessionResponse = await SessionServices.GetSessionByCodeAsync(_sessionCode);
                if (sessionResponse?.Questions.Any() == true)
                {
                    var latestQuestion = sessionResponse.Questions.OrderByDescending(q => q.QuestionNumber).First();

                    await LiveSessionServices.StartQuestion(latestQuestion.Id, _initialCountdownTime);
                }
            }
            else
            {
                Console.WriteLine("Failed to create question");
            }
        }

        if (_countdownTimer != null)
        {
            _countdownTimer.Dispose();
        }

        _countdownTimer = new Timer(
            async _ =>
            {
                if (_countdownTime > 0)
                {
                    _countdownTime--;
                    _countdownDisplay = TimeSpan.FromSeconds(_countdownTime).ToString(@"mm\:ss");
                    _progressPercentage = ((double)_countdownTime / _initialCountdownTime) * 100;

                    //Update countdown on StudentSession every 5 seconds to reduce network traffic. Every second when under 10 sec remaining
                    if (_countdownTime % 5 == 0 || _countdownTime <= 10)
                    {
                        await LiveSessionServices.UpdateRemainingTime(_countdownTime);
                    }

                    InvokeAsync(StateHasChanged);
                }
                else
                {
                    if (!string.IsNullOrEmpty(_sessionCode))
                    {
                        var session = await SessionServices.GetSessionByCodeAsync(_sessionCode);
                        if (session?.Questions?.Any() == true)
                        {
                            var latestQuestion = session.Questions
                                .OrderByDescending(q => q.QuestionNumber)
                                .FirstOrDefault();

                            if (latestQuestion is not null && !latestQuestion.EndTime.HasValue)
                            {
                                await QuestionServices.UpdateQuestionEndTimeAsync(latestQuestion.Id, DateTime.Now);
                                await GetResponsesForLatestQuestionAsync();
                            }
                        }

                        await LiveSessionServices.StopQuestion();
                    }

                    _countdownTimer?.Dispose();
                    _countdownTimer = null;
                    _isTimerOn = false;
                    InvokeAsync(StateHasChanged);
                }
            },
            null,
            0,
            1000
        );
    }

    private async Task StopQuestionCountdown()
    {
        _countdownTimer?.Dispose();
        _isTimerOn = false;
        _countdownDisplay = "00:00";
        _progressPercentage = 100;

        if (!string.IsNullOrEmpty(_sessionCode))
        {
            //TODO: add save Endtime to db

            var session = await SessionServices.GetSessionByCodeAsync(_sessionCode);
            if (session?.Questions?.Any() == true)
            {
                var latestQuestion = session.Questions
                    .OrderByDescending(q => q.QuestionNumber)
                    .FirstOrDefault();

                if (latestQuestion is not null && !latestQuestion.EndTime.HasValue)
                {
                    await QuestionServices.UpdateQuestionEndTimeAsync(latestQuestion.Id, DateTime.Now);
                    await GetResponsesForLatestQuestionAsync();
                }
            }

            await LiveSessionServices.StopQuestion();
        }
    }

    private void StartHeartbeatTimer()
    {
        _heartbeatTimer = new Timer(
            async _ =>
            {
                if (_isInSession && LiveSessionServices.IsConnected)
                {
                    try
                    {
                        await LiveSessionServices.SendHeartbeat();
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Heartbeat error: {ex.Message}");
                        await CloseActiveQuestionsAsync();
                    }
                }
            }, null, _heartbeatInterval, _heartbeatInterval
        );
    }

    private async Task CloseActiveQuestionsAsync()
    {
        if (!string.IsNullOrEmpty(_sessionCode))
        {
            try
            {
                var session = await SessionServices.GetSessionByCodeAsync(_sessionCode);
                if (session?.Questions?.Any() == true)
                {
                    var activeQuestions = session.Questions
                        .Where(q => q.StartTime.HasValue && !q.EndTime.HasValue)
                        .ToList();

                    foreach (var question in activeQuestions)
                    {
                        await QuestionServices.UpdateQuestionEndTimeAsync(question.Id, DateTime.Now);
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error closing active questions: {ex.Message}");
            }
        }
    }

    public async ValueTask DisposeAsync()
    {
        LiveSessionServices.OnStudentCountChanged -= HandleStudentCountChanged;

        _heartbeatTimer?.Dispose();
        _heartbeatTimer = null;

        if (_isInSession && _isTimerOn)
        {
            await StopQuestionCountdown();
        }

        if (_countdownTimer is not null)
        {
            _countdownTimer.Dispose();
            _countdownTimer = null;
        }

        if (_isInSession && !string.IsNullOrEmpty(_sessionCode))
        {
            try
            {
                var session = await SessionServices.GetSessionByCodeAsync(_sessionCode);
                if (session?.Questions?.Any() == true)
                {
                    var activeQuestions = session.Questions
                        .Where(q => q.StartTime.HasValue && !q.EndTime.HasValue)
                        .ToList();

                    foreach (var question in activeQuestions)
                    {
                        await QuestionServices.UpdateQuestionEndTimeAsync(question.Id, DateTime.Now);
                    }
                }

                await LiveSessionServices.EndSession();
                await LiveSessionServices.LeaveSession();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error leaving session: {ex.Message}");
            }
        }
    }

    private async Task GetResponsesForLatestQuestionAsync()
    {
        try
        {
            if (string.IsNullOrEmpty(_sessionCode))
                return;

            var session = await SessionServices.GetSessionByCodeAsync(_sessionCode);
            if (session?.Questions?.Any() != true)
                return;

            var latestQuestion = session.Questions
                .OrderByDescending(q => q.QuestionNumber)
                .FirstOrDefault();

            if (latestQuestion is null)
                return;

            _tooFastCount = latestQuestion.Responses.Count(r => r.SelectedOption == ResponseOption.TooFast);
            _perfectCount = latestQuestion.Responses.Count(r => r.SelectedOption == ResponseOption.Perfect);
            _tooSlowCount = latestQuestion.Responses.Count(r => r.SelectedOption == ResponseOption.TooSlow);

            _responseSeries = new List<ChartSeries>
            {
                new ChartSeries
                {
                    Name = "Too Fast",
                    Data = new double[] { _tooFastCount, 0, 0 },
                },
                new ChartSeries
                {
                    Name = "Perfect",
                    Data = new double[] { 0, _perfectCount, 0 },
                },
                new ChartSeries
                {
                    Name = "Too Slow",
                    Data = new double[] { 0, 0, _tooSlowCount },
                }
            };
            _showResponseChart = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error getting responses: {ex.Message}");
        }
    }

}